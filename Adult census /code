import pandas as pd
df=pd.read_csv("/content/adult.data")
df.head()
  # 2. Define column names (as per Adult dataset description)
columns = [
    "age", "workclass", "fnlwgt", "education", "education-num",
    "marital-status", "occupation", "relationship", "race",
    "sex", "capital-gain", "capital-loss", "hours-per-week",
    "native-country", "income"
]
# 3. Load dataset from the uploaded file (local path)
df = pd.read_csv("adult.data", header=None, names=columns, sep=",", skipinitialspace=True)
# 4. Display dataset shape (rows, columns)
print("Dataset Shape:", df.shape)
# 5. Show first 5 rows
print(df.head())
# 1. Import numpy for handling NaN values
import numpy as np
# 2. Replace '?' with NaN (missing values in workclass, occupation, native-country)

df.replace("?", np.nan, inplace=True)
# 3. Check missing values count in each column
print("Missing values per column:\n", df.isnull().sum())
# Replace missing values in specific columns with their mode
for col in ['workclass', 'occupation', 'native-country']:
    df[col].fillna(df[col].mode()[0], inplace=True)
# Check missing values count after filling
print("\nMissing values after filling:\n", df.isnull().sum())

# 5. Separate features (X) and target (y)
X = df.drop("income", axis=1)   # all columns except income
y = df["income"]                # target column

# 6. Split dataset into training set and test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # 70% training and 30% test

# Train Naive Bayes Classifier
from sklearn.naive_bayes import GaussianNB
nb = GaussianNB()
nb.fit(X_train, y_train)

# Predictions
y_pred = nb.predict(X_test)

# Evaluation
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))


